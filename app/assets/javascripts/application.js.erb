//= require p5.min
//= require p5.speech
let tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
let firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

let speech;
let player;
let botname = ["melody","multiplayer","melanie","malady","bloody","malayalam","modi","maladie","medically"];
let paused = true;
let started = false;
class Song{

  constructor(name) {
    this.name = name;
    this.url = "";
    this.done = false;
    this.callback;
  }

  loadUrl(name){
    if(name == "")
      this.url = "";
    else{
      //online "https://mmelody.herokuapp.com/api/v1/getvideourl/"+name
      //offline "http://localhost:3000/api/v1/getvideourl/"+name

      fetch("https://mmelody.herokuapp.com/api/v1/getvideourl/"+name)
      //fetch("http://localhost:3000/api/v1/getvideourl/"+name)
        .then(response => response.json())
        .then((data) => {
          this.url = data.infos[0]["url"];
          this.name = data.infos[0]["name"];
          if(this.callback){
              this.callback();
          }
        });
      }
  }

  isUrlReady(){
    return this.url != "";
  }

  setCallback(call){
    if(!this.isUrlReady())
      this.callback = call;
    else{
      this.callback = call;
      this.callback();
    }
  }
}

class PlayList{

  constructor(on_play,on_pause){
    this.songs = [];
    this.current_song;
    this.index = 0;
    this.on_play = on_play;
    this.on_pause = on_pause;
    this.interval;
  }

  Add(song){
    this.songs.push(song);
  }

  Play(song){
    if(song.name != "" && song.name.length > 2){
      //add the new song to the playlist
      this.Add(song);
      //set the current song to the requested one
      this.setCurrentSong(song);
    }
    else
      speech.speak("Pardon?");
  }

  startPlaylist(){
    this.playCurrentSong();
  }

  playCurrentSong(){
    this.current_song = this.songs[this.index];
    this.current_song.loadUrl(this.current_song.name);
    this.current_song.done = false;
    this.current_song.setCallback(this.on_play);
  }

  setCurrentSong(song){
      this.current_song = song;
      //since we are playing a new song the current index is the index of the last song
      this.index = this.songs.length;
      this.current_song.loadUrl(this.current_song.name);
      this.current_song.done = false;
      this.current_song.setCallback(this.on_play);
  }

  PlayNext(){
    if(this.index+1 < this.songs.length){
      this.index++;
      this.playCurrentSong();
    }
    else{
      console.log("Reached the end of the playlist");
    }

  }

  PlayPrevious(){
    if(this.index>0){
      this.index--;
      this.current_song.done = false;
      this.current_song = this.songs[this.index];
      this.Play(new Song(""));
    }
    else{
      console.log("Reached the beginning of the playlist");
    }
  }

}

let playlist = new PlayList(playVideo,pauseVideo);


function setup() {
  noCanvas();
  initAnnyang();
  startSpeechRec();
  initSpeech();

  initPlayer();
  window.setInterval(checkSongProgression,1000);

  document.getElementById("previous").addEventListener("click", playlist.PlayPrevious);
  document.getElementById("next").addEventListener("click", playlist.PlayNext);
  document.getElementById("play").addEventListener("click", toggleVideo);
}

function initAnnyang(){
  if(annyang) {
    var commands = {
      '*all': gotSpeech
    };
    annyang.addCommands(commands);
  }
}

function initSpeech(){
  speech = new p5.Speech();
  speech.setLang('en-UK');
  speech.setVoice('Google UK English Female');
}
function stopSpeechRec(){
  annyang.abort();
  if(document.getElementById("voice-on"))
    document.getElementById("voice-on").id = 'voice-off';
}

function startSpeechRec(){
  annyang.start();
  if(document.getElementById("voice-off"))
    document.getElementById("voice-off").id = 'voice-on';
}

function gotSpeech(text) {
  if(text){
    processSentence(text);
  }
  else{
    console.log("the fuck u said?");
  }
}

function processSentence(sentence){
  data = Process(sentence);

  if(data.bot_called){
    switch(data.verb){
      case "play":
        if(data.song_name.includes("songs like") || data.song_name.includes("song like") || data.song_name.includes("similar songs") || data.song_name.includes("similar song")){
          speech.speak("Loading similar songs to " + isolateSongsLike(data.song_name));

          fetch("https://mmelody.herokuapp.com/api/v1/getsongslike/"+isolateSongsLike(data.song_name))
          //fetch("http://localhost:3000/api/v1/getsongslike/"+isolateSongsLike(data.song_name))
            .then(response => response.json())
            .then((data) => {
              data.infos.forEach(function(element) {
                playlist.Add(new Song(element["name"]+" "+element["artist"]));
              });
              playlist.startPlaylist();
            });
        }
        else
          playlist.Play(new Song(data.song_name));
        break;
      case "add": playlist.Add(new Song(data.song_name)); break;
      case "stop": playlist.pauseVideo(); break;
      case "next": playlist.PlayNext(); break;
      case "back": playlist.PlayPrevious(); break;
    }
  }
  else{
    console.log(sentence);
  }
}

function Process(string){
  string = string.toLowerCase();
  return data = {
    bot_called : isBotCalled(string),
    verb : processVerb(string),
    song_name : extractSongName(string)
  };
}

function isBotCalled(string){
  let outcome = false;
   //devo fare che se si prendono i 3/4 delle lettere del nome bot, lui risponde lo stess
  botname.forEach(function(element) {
    if(string.includes(element))
      outcome = true;
  });
  return outcome;
}

verbs = ["stop","pause","next","skip","play","add","queue","start"];
function processVerb(string){
  if(string.includes("stop") || string.includes("pause"))
    return "stop";
  else if(string.includes("play") || string.includes("start"))
    return "play";
  else if(string.includes("add") || string.includes("queue"))
    return "add";
  else if(string.includes("next") || string.includes("skip"))
    return "next";
  else if(string.includes("previous") || string.includes("back"))
    return "back";
}

function extractSongName(string){
  newString = string.split(firstVerbInString(string)).pop();
  if(newString){
    return newString.trim();
  }
  return "";
}

function firstVerbInString(string){
  split_string = string.split(" ");
  fond = "";
  split_string.forEach(function(element) {
    if(verbs.includes(element) && fond == "")
      fond = element
  });
  return fond;
}

function isolateSongsLike(string){
  split_string = string.split(" ");
  fond = "";
  split_string.forEach(function(element) {
    if("like".includes(element) || "to".includes(element) && fond == "")
      fond = element
  });

  newString = string.split(fond).pop();
  if(newString){
    return newString.trim();
  }
  console.log(newString);
}

function initPlayer(){

  player = new YT.Player('player', {
    height: '270',
    width: '480',
    videoId: "",
    playerVars: {
      controls: 0,
      disablekb: 1,
      autoplay: 1,
      autohide: 1,
      wmode: 'opaque',
      rel: 0,
      start: 0,
      showinfo: 0
    },
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });
}

function playVideo(){
  if(paused){
    paused = false;
    document.getElementById("play").id = 'pause';
    resumeVideo();
  }
  started = false;
  document.getElementById("track-name").innerHTML = playlist.current_song.name.substring(0,21)+"...";
  document.getElementById("player-container").style.visibility = 'visible';
  player.loadVideoById(playlist.current_song.url,0);
  speech.speak("Playing: " + playlist.current_song.name);
}


function checkSongProgression(){
  if(player && playlist.songs.length>0){
    document.getElementById("current-time").innerHTML = fmtMSS(Math.round(player.getCurrentTime()));
    document.getElementById("total-time").innerHTML = "-" +fmtMSS(Math.round(player.getDuration() - player.getCurrentTime()));
    document.getElementById("myRange").value = player.getCurrentTime() / player.getDuration() * 100;
    if(!started && player.getCurrentTime() >= 0){
      seekTo(0);
      resumeVideo();
      started = true;
    }
  }
}

function seekTo(a){
  player.seekTo(player.getDuration()*((a-1)/100), true);
}

function fmtMSS(s){return(s-(s%=60))/60+(9<s?':':':0')+s}

function onPlayerReady(e) {
  player.setPlaybackQuality("small");
  player.playVideo();
}
function onPlayerStateChange(e){
  if(e.data === 2) //paused
    pauseVideo();
  else if(e.data === 1) //play
    resumeVideo();
  else if(e.data == 0) { //finished video
    started = false;
    startSpeechRec();
    playlist.current_song.done = true;
    playlist.PlayNext();
  }
}

function pauseVideo(){
  paused = true;
  if(document.getElementById("pause"))
    document.getElementById("pause").id = 'play';
  player.pauseVideo();
  startSpeechRec();
}

function resumeVideo(){
  paused = false;
  if(document.getElementById("play"))
    document.getElementById("play").id = 'pause';
  player.playVideo();
  stopSpeechRec();
}

function toggleVideo(){
  if(!paused){
    pauseVideo();
  }
  else{
    resumeVideo();
  }

}
